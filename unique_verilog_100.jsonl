{"user_question": "Write a synthesizable Verilog module implementing a Moore sequence detector that detects the sequence 1010 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module moore_seq_1010 (\n    input clk,\n    input reset,\n    input in,\n    output reg out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: state <= (in == 1) ? S1 : S1;\n                        S1: state <= (in == 0) ? S2 : S1;\n                        S2: state <= (in == 1) ? S3 : S1;\n                        S3: state <= (in == 0) ? S4 : S1;\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = (state == S4) ? 1'b1 : 1'b0;\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Mealy sequence detector that detects the sequence 1101 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module mealy_seq_1101 (\n    input clk,\n    input reset,\n    input in,\n    output  out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: begin\n                if (in == 1) state <= S1;\n                else state <= S1;\n            end\n                        S1: begin\n                if (in == 1) state <= S2;\n                else state <= S1;\n            end\n                        S2: begin\n                if (in == 0) state <= S3;\n                else state <= S1;\n            end\n                        S3: begin\n                if (in == 1) state <= S4;\n                else state <= S1;\n            end\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = 0; // Add Mealy output logic\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Moore sequence detector that detects the sequence 1001 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module moore_seq_1001 (\n    input clk,\n    input reset,\n    input in,\n    output reg out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: state <= (in == 1) ? S1 : S1;\n                        S1: state <= (in == 0) ? S2 : S1;\n                        S2: state <= (in == 0) ? S3 : S1;\n                        S3: state <= (in == 1) ? S4 : S1;\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = (state == S4) ? 1'b1 : 1'b0;\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Mealy sequence detector that detects the sequence 0110 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module mealy_seq_0110 (\n    input clk,\n    input reset,\n    input in,\n    output  out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: begin\n                if (in == 0) state <= S1;\n                else state <= S0;\n            end\n                        S1: begin\n                if (in == 1) state <= S2;\n                else state <= S0;\n            end\n                        S2: begin\n                if (in == 1) state <= S3;\n                else state <= S0;\n            end\n                        S3: begin\n                if (in == 0) state <= S4;\n                else state <= S0;\n            end\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = 0; // Add Mealy output logic\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Moore sequence detector that detects the sequence 1110 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module moore_seq_1110 (\n    input clk,\n    input reset,\n    input in,\n    output reg out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: state <= (in == 1) ? S1 : S1;\n                        S1: state <= (in == 1) ? S2 : S1;\n                        S2: state <= (in == 1) ? S3 : S1;\n                        S3: state <= (in == 0) ? S4 : S1;\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = (state == S4) ? 1'b1 : 1'b0;\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Mealy sequence detector that detects the sequence 0001 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module mealy_seq_0001 (\n    input clk,\n    input reset,\n    input in,\n    output  out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: begin\n                if (in == 0) state <= S1;\n                else state <= S0;\n            end\n                        S1: begin\n                if (in == 0) state <= S2;\n                else state <= S0;\n            end\n                        S2: begin\n                if (in == 0) state <= S3;\n                else state <= S0;\n            end\n                        S3: begin\n                if (in == 1) state <= S4;\n                else state <= S0;\n            end\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = 0; // Add Mealy output logic\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Moore sequence detector that detects the sequence 1011 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module moore_seq_1011 (\n    input clk,\n    input reset,\n    input in,\n    output reg out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: state <= (in == 1) ? S1 : S1;\n                        S1: state <= (in == 0) ? S2 : S1;\n                        S2: state <= (in == 1) ? S3 : S1;\n                        S3: state <= (in == 1) ? S4 : S1;\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = (state == S4) ? 1'b1 : 1'b0;\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Mealy sequence detector that detects the sequence 0101 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module mealy_seq_0101 (\n    input clk,\n    input reset,\n    input in,\n    output  out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: begin\n                if (in == 0) state <= S1;\n                else state <= S0;\n            end\n                        S1: begin\n                if (in == 1) state <= S2;\n                else state <= S0;\n            end\n                        S2: begin\n                if (in == 0) state <= S3;\n                else state <= S0;\n            end\n                        S3: begin\n                if (in == 1) state <= S4;\n                else state <= S0;\n            end\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = 0; // Add Mealy output logic\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Moore sequence detector that detects the sequence 0011 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module moore_seq_0011 (\n    input clk,\n    input reset,\n    input in,\n    output reg out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: state <= (in == 0) ? S1 : S0;\n                        S1: state <= (in == 0) ? S2 : S0;\n                        S2: state <= (in == 1) ? S3 : S0;\n                        S3: state <= (in == 1) ? S4 : S0;\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = (state == S4) ? 1'b1 : 1'b0;\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Mealy sequence detector that detects the sequence 0111 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module mealy_seq_0111 (\n    input clk,\n    input reset,\n    input in,\n    output  out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: begin\n                if (in == 0) state <= S1;\n                else state <= S0;\n            end\n                        S1: begin\n                if (in == 1) state <= S2;\n                else state <= S0;\n            end\n                        S2: begin\n                if (in == 1) state <= S3;\n                else state <= S0;\n            end\n                        S3: begin\n                if (in == 1) state <= S4;\n                else state <= S0;\n            end\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = 0; // Add Mealy output logic\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Moore sequence detector that detects the sequence 1111 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module moore_seq_1111 (\n    input clk,\n    input reset,\n    input in,\n    output reg out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: state <= (in == 1) ? S1 : S1;\n                        S1: state <= (in == 1) ? S2 : S1;\n                        S2: state <= (in == 1) ? S3 : S1;\n                        S3: state <= (in == 1) ? S4 : S1;\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = (state == S4) ? 1'b1 : 1'b0;\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Mealy sequence detector that detects the sequence 0000 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module mealy_seq_0000 (\n    input clk,\n    input reset,\n    input in,\n    output  out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: begin\n                if (in == 0) state <= S1;\n                else state <= S0;\n            end\n                        S1: begin\n                if (in == 0) state <= S2;\n                else state <= S0;\n            end\n                        S2: begin\n                if (in == 0) state <= S3;\n                else state <= S0;\n            end\n                        S3: begin\n                if (in == 0) state <= S4;\n                else state <= S0;\n            end\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = 0; // Add Mealy output logic\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Moore sequence detector that detects the sequence 1100 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module moore_seq_1100 (\n    input clk,\n    input reset,\n    input in,\n    output reg out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: state <= (in == 1) ? S1 : S1;\n                        S1: state <= (in == 1) ? S2 : S1;\n                        S2: state <= (in == 0) ? S3 : S1;\n                        S3: state <= (in == 0) ? S4 : S1;\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = (state == S4) ? 1'b1 : 1'b0;\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Mealy sequence detector that detects the sequence 0010 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module mealy_seq_0010 (\n    input clk,\n    input reset,\n    input in,\n    output  out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: begin\n                if (in == 0) state <= S1;\n                else state <= S0;\n            end\n                        S1: begin\n                if (in == 0) state <= S2;\n                else state <= S0;\n            end\n                        S2: begin\n                if (in == 1) state <= S3;\n                else state <= S0;\n            end\n                        S3: begin\n                if (in == 0) state <= S4;\n                else state <= S0;\n            end\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = 0; // Add Mealy output logic\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Moore sequence detector that detects the sequence 1000 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module moore_seq_1000 (\n    input clk,\n    input reset,\n    input in,\n    output reg out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: state <= (in == 1) ? S1 : S1;\n                        S1: state <= (in == 0) ? S2 : S1;\n                        S2: state <= (in == 0) ? S3 : S1;\n                        S3: state <= (in == 0) ? S4 : S1;\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = (state == S4) ? 1'b1 : 1'b0;\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Mealy sequence detector that detects the sequence 0100 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module mealy_seq_0100 (\n    input clk,\n    input reset,\n    input in,\n    output  out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n    parameter S4 = 4;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: begin\n                if (in == 0) state <= S1;\n                else state <= S0;\n            end\n                        S1: begin\n                if (in == 1) state <= S2;\n                else state <= S0;\n            end\n                        S2: begin\n                if (in == 0) state <= S3;\n                else state <= S0;\n            end\n                        S3: begin\n                if (in == 0) state <= S4;\n                else state <= S0;\n            end\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = 0; // Add Mealy output logic\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Moore sequence detector that detects the sequence 111 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module moore_seq_111 (\n    input clk,\n    input reset,\n    input in,\n    output reg out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: state <= (in == 1) ? S1 : S1;\n                        S1: state <= (in == 1) ? S2 : S1;\n                        S2: state <= (in == 1) ? S3 : S1;\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = (state == S3) ? 1'b1 : 1'b0;\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Mealy sequence detector that detects the sequence 011 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module mealy_seq_011 (\n    input clk,\n    input reset,\n    input in,\n    output  out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: begin\n                if (in == 0) state <= S1;\n                else state <= S0;\n            end\n                        S1: begin\n                if (in == 1) state <= S2;\n                else state <= S0;\n            end\n                        S2: begin\n                if (in == 1) state <= S3;\n                else state <= S0;\n            end\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = 0; // Add Mealy output logic\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Moore sequence detector that detects the sequence 101 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module moore_seq_101 (\n    input clk,\n    input reset,\n    input in,\n    output reg out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: state <= (in == 1) ? S1 : S1;\n                        S1: state <= (in == 0) ? S2 : S1;\n                        S2: state <= (in == 1) ? S3 : S1;\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = (state == S3) ? 1'b1 : 1'b0;\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Mealy sequence detector that detects the sequence 001 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module mealy_seq_001 (\n    input clk,\n    input reset,\n    input in,\n    output  out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: begin\n                if (in == 0) state <= S1;\n                else state <= S0;\n            end\n                        S1: begin\n                if (in == 0) state <= S2;\n                else state <= S0;\n            end\n                        S2: begin\n                if (in == 1) state <= S3;\n                else state <= S0;\n            end\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = 0; // Add Mealy output logic\nendmodule\n"}
{"user_question": "Write a synthesizable Verilog module implementing a Moore sequence detector that detects the sequence 110 on a serial input stream. The output should go high when the sequence is detected.", "eval_prompt": "module moore_seq_110 (\n    input clk,\n    input reset,\n    input in,\n    output reg out\n);\n    reg [2:0] state;\n    parameter S0 = 0;\n    parameter S1 = 1;\n    parameter S2 = 2;\n    parameter S3 = 3;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) state <= S0;\n        else begin\n            case (state)\n                        S0: state <= (in == 1) ? S1 : S1;\n                        S1: state <= (in == 1) ? S2 : S1;\n                        S2: state <= (in == 0) ? S3 : S1;\n            default: state <= S0;\n            endcase\n        end\n    end\n\n    assign out = (state == S3) ? 1'b1 : 1'b0;\nendmodule\n"}
{"user_question": "Create a synthesizable 2-to-1 multiplexer in Verilog.", "eval_prompt": "// Verilog code for 2-to-1 mux\nmodule 2-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Create a Verilog module to convert BCD to 7-segment display encoding.", "eval_prompt": "// Verilog code for BCD to 7-segment\nmodule bcd_to_7-segment();\n    // implementation here\nendmodule"}
{"user_question": "Design an 8-to-1 multiplexer in Verilog using case statement.", "eval_prompt": "// Verilog code for 8-to-1 mux\nmodule 8-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Design a traffic light controller using a Verilog FSM.", "eval_prompt": "// Verilog code for FSM traffic light\nmodule fsm_traffic_light();\n    // implementation here\nendmodule"}
{"user_question": "Create a synthesizable 2-to-1 multiplexer in Verilog.", "eval_prompt": "// Verilog code for 2-to-1 mux\nmodule 2-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Design a 4-bit serial-in, parallel-out shift register in Verilog.", "eval_prompt": "// Verilog code for Shift register\nmodule shift_register();\n    // implementation here\nendmodule"}
{"user_question": "Design a traffic light controller using a Verilog FSM.", "eval_prompt": "// Verilog code for FSM traffic light\nmodule fsm_traffic_light();\n    // implementation here\nendmodule"}
{"user_question": "Create an 8-bit up counter in Verilog with synchronous reset.", "eval_prompt": "// Verilog code for 8-bit counter\nmodule 8-bit_counter();\n    // implementation here\nendmodule"}
{"user_question": "Design a 4-bit serial-in, parallel-out shift register in Verilog.", "eval_prompt": "// Verilog code for Shift register\nmodule shift_register();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module to compare two 4-bit numbers.", "eval_prompt": "// Verilog code for 4-bit comparator\nmodule 4-bit_comparator();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a dual-port synchronous RAM.", "eval_prompt": "// Verilog code for Dual-port RAM\nmodule dual-port_ram();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a 4-to-2 priority encoder.", "eval_prompt": "// Verilog code for Priority encoder\nmodule priority_encoder();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a 4-to-2 priority encoder.", "eval_prompt": "// Verilog code for Priority encoder\nmodule priority_encoder();\n    // implementation here\nendmodule"}
{"user_question": "Create a synthesizable 2-to-1 multiplexer in Verilog.", "eval_prompt": "// Verilog code for 2-to-1 mux\nmodule 2-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Implement a synthesizable Verilog module for a 4-bit ALU supporting ADD, SUB, AND, OR operations.", "eval_prompt": "// Verilog code for 4-bit ALU\nmodule 4-bit_alu();\n    // implementation here\nendmodule"}
{"user_question": "Create a synthesizable 2-to-1 multiplexer in Verilog.", "eval_prompt": "// Verilog code for 2-to-1 mux\nmodule 2-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Create a synthesizable 2-to-1 multiplexer in Verilog.", "eval_prompt": "// Verilog code for 2-to-1 mux\nmodule 2-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Implement a synthesizable Verilog module for a 4-bit ALU supporting ADD, SUB, AND, OR operations.", "eval_prompt": "// Verilog code for 4-bit ALU\nmodule 4-bit_alu();\n    // implementation here\nendmodule"}
{"user_question": "Implement a synthesizable Verilog module for a 4-bit ALU supporting ADD, SUB, AND, OR operations.", "eval_prompt": "// Verilog code for 4-bit ALU\nmodule 4-bit_alu();\n    // implementation here\nendmodule"}
{"user_question": "Create a synthesizable 2-to-1 multiplexer in Verilog.", "eval_prompt": "// Verilog code for 2-to-1 mux\nmodule 2-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Create a synthesizable 2-to-1 multiplexer in Verilog.", "eval_prompt": "// Verilog code for 2-to-1 mux\nmodule 2-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Create an 8-bit up counter in Verilog with synchronous reset.", "eval_prompt": "// Verilog code for 8-bit counter\nmodule 8-bit_counter();\n    // implementation here\nendmodule"}
{"user_question": "Design a 4-bit serial-in, parallel-out shift register in Verilog.", "eval_prompt": "// Verilog code for Shift register\nmodule shift_register();\n    // implementation here\nendmodule"}
{"user_question": "Create an 8-bit up counter in Verilog with synchronous reset.", "eval_prompt": "// Verilog code for 8-bit counter\nmodule 8-bit_counter();\n    // implementation here\nendmodule"}
{"user_question": "Create an 8-bit up counter in Verilog with synchronous reset.", "eval_prompt": "// Verilog code for 8-bit counter\nmodule 8-bit_counter();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module to compare two 4-bit numbers.", "eval_prompt": "// Verilog code for 4-bit comparator\nmodule 4-bit_comparator();\n    // implementation here\nendmodule"}
{"user_question": "Design a traffic light controller using a Verilog FSM.", "eval_prompt": "// Verilog code for FSM traffic light\nmodule fsm_traffic_light();\n    // implementation here\nendmodule"}
{"user_question": "Design a traffic light controller using a Verilog FSM.", "eval_prompt": "// Verilog code for FSM traffic light\nmodule fsm_traffic_light();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a 4-to-2 priority encoder.", "eval_prompt": "// Verilog code for Priority encoder\nmodule priority_encoder();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module to compare two 4-bit numbers.", "eval_prompt": "// Verilog code for 4-bit comparator\nmodule 4-bit_comparator();\n    // implementation here\nendmodule"}
{"user_question": "Design a 4-bit serial-in, parallel-out shift register in Verilog.", "eval_prompt": "// Verilog code for Shift register\nmodule shift_register();\n    // implementation here\nendmodule"}
{"user_question": "Create a synthesizable 2-to-1 multiplexer in Verilog.", "eval_prompt": "// Verilog code for 2-to-1 mux\nmodule 2-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Design an 8-to-1 multiplexer in Verilog using case statement.", "eval_prompt": "// Verilog code for 8-to-1 mux\nmodule 8-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Design a traffic light controller using a Verilog FSM.", "eval_prompt": "// Verilog code for FSM traffic light\nmodule fsm_traffic_light();\n    // implementation here\nendmodule"}
{"user_question": "Design a 4-bit serial-in, parallel-out shift register in Verilog.", "eval_prompt": "// Verilog code for Shift register\nmodule shift_register();\n    // implementation here\nendmodule"}
{"user_question": "Create an 8-bit up counter in Verilog with synchronous reset.", "eval_prompt": "// Verilog code for 8-bit counter\nmodule 8-bit_counter();\n    // implementation here\nendmodule"}
{"user_question": "Design a 4-bit serial-in, parallel-out shift register in Verilog.", "eval_prompt": "// Verilog code for Shift register\nmodule shift_register();\n    // implementation here\nendmodule"}
{"user_question": "Implement a synthesizable Verilog module for a 4-bit ALU supporting ADD, SUB, AND, OR operations.", "eval_prompt": "// Verilog code for 4-bit ALU\nmodule 4-bit_alu();\n    // implementation here\nendmodule"}
{"user_question": "Create a Verilog module to convert BCD to 7-segment display encoding.", "eval_prompt": "// Verilog code for BCD to 7-segment\nmodule bcd_to_7-segment();\n    // implementation here\nendmodule"}
{"user_question": "Implement a synthesizable Verilog module for a 4-bit ALU supporting ADD, SUB, AND, OR operations.", "eval_prompt": "// Verilog code for 4-bit ALU\nmodule 4-bit_alu();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module to compare two 4-bit numbers.", "eval_prompt": "// Verilog code for 4-bit comparator\nmodule 4-bit_comparator();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a 4-to-2 priority encoder.", "eval_prompt": "// Verilog code for Priority encoder\nmodule priority_encoder();\n    // implementation here\nendmodule"}
{"user_question": "Design an 8-to-1 multiplexer in Verilog using case statement.", "eval_prompt": "// Verilog code for 8-to-1 mux\nmodule 8-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Create a Verilog module to convert BCD to 7-segment display encoding.", "eval_prompt": "// Verilog code for BCD to 7-segment\nmodule bcd_to_7-segment();\n    // implementation here\nendmodule"}
{"user_question": "Create a synthesizable 2-to-1 multiplexer in Verilog.", "eval_prompt": "// Verilog code for 2-to-1 mux\nmodule 2-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Design a traffic light controller using a Verilog FSM.", "eval_prompt": "// Verilog code for FSM traffic light\nmodule fsm_traffic_light();\n    // implementation here\nendmodule"}
{"user_question": "Implement a synthesizable Verilog module for a 4-bit ALU supporting ADD, SUB, AND, OR operations.", "eval_prompt": "// Verilog code for 4-bit ALU\nmodule 4-bit_alu();\n    // implementation here\nendmodule"}
{"user_question": "Implement a synthesizable Verilog module for a 4-bit ALU supporting ADD, SUB, AND, OR operations.", "eval_prompt": "// Verilog code for 4-bit ALU\nmodule 4-bit_alu();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a 4-to-2 priority encoder.", "eval_prompt": "// Verilog code for Priority encoder\nmodule priority_encoder();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module to compare two 4-bit numbers.", "eval_prompt": "// Verilog code for 4-bit comparator\nmodule 4-bit_comparator();\n    // implementation here\nendmodule"}
{"user_question": "Create an 8-bit up counter in Verilog with synchronous reset.", "eval_prompt": "// Verilog code for 8-bit counter\nmodule 8-bit_counter();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a 4-to-2 priority encoder.", "eval_prompt": "// Verilog code for Priority encoder\nmodule priority_encoder();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a dual-port synchronous RAM.", "eval_prompt": "// Verilog code for Dual-port RAM\nmodule dual-port_ram();\n    // implementation here\nendmodule"}
{"user_question": "Create a synthesizable 2-to-1 multiplexer in Verilog.", "eval_prompt": "// Verilog code for 2-to-1 mux\nmodule 2-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Design a 4-bit serial-in, parallel-out shift register in Verilog.", "eval_prompt": "// Verilog code for Shift register\nmodule shift_register();\n    // implementation here\nendmodule"}
{"user_question": "Design a 4-bit serial-in, parallel-out shift register in Verilog.", "eval_prompt": "// Verilog code for Shift register\nmodule shift_register();\n    // implementation here\nendmodule"}
{"user_question": "Create an 8-bit up counter in Verilog with synchronous reset.", "eval_prompt": "// Verilog code for 8-bit counter\nmodule 8-bit_counter();\n    // implementation here\nendmodule"}
{"user_question": "Create a Verilog module to convert BCD to 7-segment display encoding.", "eval_prompt": "// Verilog code for BCD to 7-segment\nmodule bcd_to_7-segment();\n    // implementation here\nendmodule"}
{"user_question": "Design a traffic light controller using a Verilog FSM.", "eval_prompt": "// Verilog code for FSM traffic light\nmodule fsm_traffic_light();\n    // implementation here\nendmodule"}
{"user_question": "Design an 8-to-1 multiplexer in Verilog using case statement.", "eval_prompt": "// Verilog code for 8-to-1 mux\nmodule 8-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a dual-port synchronous RAM.", "eval_prompt": "// Verilog code for Dual-port RAM\nmodule dual-port_ram();\n    // implementation here\nendmodule"}
{"user_question": "Create a synthesizable 2-to-1 multiplexer in Verilog.", "eval_prompt": "// Verilog code for 2-to-1 mux\nmodule 2-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Implement a synthesizable Verilog module for a 4-bit ALU supporting ADD, SUB, AND, OR operations.", "eval_prompt": "// Verilog code for 4-bit ALU\nmodule 4-bit_alu();\n    // implementation here\nendmodule"}
{"user_question": "Create a synthesizable 2-to-1 multiplexer in Verilog.", "eval_prompt": "// Verilog code for 2-to-1 mux\nmodule 2-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Design an 8-to-1 multiplexer in Verilog using case statement.", "eval_prompt": "// Verilog code for 8-to-1 mux\nmodule 8-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a 4-to-2 priority encoder.", "eval_prompt": "// Verilog code for Priority encoder\nmodule priority_encoder();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a dual-port synchronous RAM.", "eval_prompt": "// Verilog code for Dual-port RAM\nmodule dual-port_ram();\n    // implementation here\nendmodule"}
{"user_question": "Design an 8-to-1 multiplexer in Verilog using case statement.", "eval_prompt": "// Verilog code for 8-to-1 mux\nmodule 8-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Design an 8-to-1 multiplexer in Verilog using case statement.", "eval_prompt": "// Verilog code for 8-to-1 mux\nmodule 8-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module to compare two 4-bit numbers.", "eval_prompt": "// Verilog code for 4-bit comparator\nmodule 4-bit_comparator();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module to compare two 4-bit numbers.", "eval_prompt": "// Verilog code for 4-bit comparator\nmodule 4-bit_comparator();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a 4-to-2 priority encoder.", "eval_prompt": "// Verilog code for Priority encoder\nmodule priority_encoder();\n    // implementation here\nendmodule"}
{"user_question": "Design a traffic light controller using a Verilog FSM.", "eval_prompt": "// Verilog code for FSM traffic light\nmodule fsm_traffic_light();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a 4-to-2 priority encoder.", "eval_prompt": "// Verilog code for Priority encoder\nmodule priority_encoder();\n    // implementation here\nendmodule"}
{"user_question": "Create a synthesizable 2-to-1 multiplexer in Verilog.", "eval_prompt": "// Verilog code for 2-to-1 mux\nmodule 2-to-1_mux();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a dual-port synchronous RAM.", "eval_prompt": "// Verilog code for Dual-port RAM\nmodule dual-port_ram();\n    // implementation here\nendmodule"}
{"user_question": "Create an 8-bit up counter in Verilog with synchronous reset.", "eval_prompt": "// Verilog code for 8-bit counter\nmodule 8-bit_counter();\n    // implementation here\nendmodule"}
{"user_question": "Write a Verilog module for a 4-to-2 priority encoder.", "eval_prompt": "// Verilog code for Priority encoder\nmodule priority_encoder();\n    // implementation here\nendmodule"}
{"user_question": "Design a 4-bit serial-in, parallel-out shift register in Verilog.", "eval_prompt": "// Verilog code for Shift register\nmodule shift_register();\n    // implementation here\nendmodule"}
