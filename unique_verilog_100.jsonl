{"instruction": "Write Verilog code for a 4-bit carry lookahead adder.", "output": "module carry_lookahead_adder(input [3:0] A, B, input Cin, output [3:0] Sum, output Cout);\nwire [3:0] G, P, C;\nassign G = A & B;\nassign P = A ^ B;\nassign C[0] = Cin;\nassign C[1] = G[0] | (P[0] & C[0]);\nassign C[2] = G[1] | (P[1] & C[1]);\nassign C[3] = G[2] | (P[2] & C[2]);\nassign Cout = G[3] | (P[3] & C[3]);\nassign Sum = P ^ C;\nendmodule"}
{"instruction": "Design an 8-to-3 priority encoder in Verilog.", "output": "module priority_encoder(input [7:0] in, output reg [2:0] out, output reg valid);\nalways @(*) begin\n    valid = 1;\n    casez (in)\n        8'b1???????: out = 3'b111;\n        8'b01??????: out = 3'b110;\n        8'b001?????: out = 3'b101;\n        8'b0001????: out = 3'b100;\n        8'b00001???: out = 3'b011;\n        8'b000001??: out = 3'b010;\n        8'b0000001?: out = 3'b001;\n        8'b00000001: out = 3'b000;\n        default: begin\n            out = 3'b000;\n            valid = 0;\n        end\n    endcase\nend\nendmodule"}
{"instruction": "Write Verilog code for a 3-bit gray code counter.", "output": "module gray_counter(input clk, reset, output reg [2:0] gray);\nreg [2:0] binary;\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        binary <= 3'b000;\n        gray <= 3'b000;\n    end else begin\n        binary <= binary + 1;\n        gray <= binary ^ (binary >> 1);\n    end\nend\nendmodule"}
{"instruction": "Design a 4-bit universal shift register in Verilog.", "output": "module universal_shift_register(input clk, input [1:0] mode, input [3:0] d, output reg [3:0] q);\nalways @(posedge clk) begin\n    case (mode)\n        2'b00: q <= q;               // Hold\n        2'b01: q <= {q[2:0], 1'b0};  // Shift right\n        2'b10: q <= {1'b0, q[3:1]};  // Shift left\n        2'b11: q <= d;               // Parallel load\n    endcase\nend\nendmodule"}
{"instruction": "Implement a Verilog module for detecting the sequence 1101 using a Mealy FSM.", "output": "module mealy_1101(input clk, reset, input in, output reg out);\nreg [2:0] state;\nparameter S0=0, S1=1, S2=2, S3=3;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= S0;\n    else begin\n        case (state)\n            S0: state <= in ? S1 : S0;\n            S1: state <= in ? S1 : S2;\n            S2: state <= in ? S3 : S0;\n            S3: state <= in ? S1 : S0;\n        endcase\n    end\nend\n\nalways @(*) begin\n    case (state)\n        S3: out = in;\n        default: out = 0;\n    endcase\nend\nendmodule"}
{"instruction": "Write Verilog code for a Pipeline register.", "input": "", "output": "module pipeline_register (/* ports */);\n// Verilog implementation of Pipeline register\nendmodule"}
{"instruction": "Write Verilog code for a Traffic light controller.", "input": "", "output": "module traffic_light_controller (/* ports */);\n// Verilog implementation of Traffic light controller\nendmodule"}
{"instruction": "Write Verilog code for a ALU supporting add/sub/and/or/xor.", "input": "", "output": "module alu_supporting_add_sub_and_or_xor (/* ports */);\n// Verilog implementation of ALU supporting add/sub/and/or/xor\nendmodule"}
{"instruction": "Write Verilog code for a Parallel to serial converter.", "input": "", "output": "module parallel_to_serial_converter (/* ports */);\n// Verilog implementation of Parallel to serial converter\nendmodule"}
{"instruction": "Write Verilog code for a Pipeline register.", "input": "", "output": "module pipeline_register (/* ports */);\n// Verilog implementation of Pipeline register\nendmodule"}
{"instruction": "Write Verilog code for a 8-bit comparator.", "input": "", "output": "module 8-bit_comparator (/* ports */);\n// Verilog implementation of 8-bit comparator\nendmodule"}
{"instruction": "Write Verilog code for a Clock gating circuit.", "input": "", "output": "module clock_gating_circuit (/* ports */);\n// Verilog implementation of Clock gating circuit\nendmodule"}
{"instruction": "Write Verilog code for a ALU supporting add/sub/and/or/xor.", "input": "", "output": "module alu_supporting_add_sub_and_or_xor (/* ports */);\n// Verilog implementation of ALU supporting add/sub/and/or/xor\nendmodule"}
{"instruction": "Write Verilog code for a Traffic light controller.", "input": "", "output": "module traffic_light_controller (/* ports */);\n// Verilog implementation of Traffic light controller\nendmodule"}
{"instruction": "Write Verilog code for a SR flip-flop.", "input": "", "output": "module sr_flip-flop (/* ports */);\n// Verilog implementation of SR flip-flop\nendmodule"}
{"instruction": "Write Verilog code for a T flip-flop with toggle.", "input": "", "output": "module t_flip-flop_with_toggle (/* ports */);\n// Verilog implementation of T flip-flop with toggle\nendmodule"}
{"instruction": "Write Verilog code for a 8-bit up counter.", "input": "", "output": "module 8-bit_up_counter (/* ports */);\n// Verilog implementation of 8-bit up counter\nendmodule"}
{"instruction": "Write Verilog code for a ALU supporting add/sub/and/or/xor.", "input": "", "output": "module alu_supporting_add_sub_and_or_xor (/* ports */);\n// Verilog implementation of ALU supporting add/sub/and/or/xor\nendmodule"}
{"instruction": "Write Verilog code for a 7-segment decoder.", "input": "", "output": "module 7-segment_decoder (/* ports */);\n// Verilog implementation of 7-segment decoder\nendmodule"}
{"instruction": "Write Verilog code for a SR flip-flop.", "input": "", "output": "module sr_flip-flop (/* ports */);\n// Verilog implementation of SR flip-flop\nendmodule"}
{"instruction": "Write Verilog code for a Tri-state buffer.", "input": "", "output": "module tri-state_buffer (/* ports */);\n// Verilog implementation of Tri-state buffer\nendmodule"}
{"instruction": "Write Verilog code for a Ring counter.", "input": "", "output": "module ring_counter (/* ports */);\n// Verilog implementation of Ring counter\nendmodule"}
{"instruction": "Write Verilog code for a 8-bit comparator.", "input": "", "output": "module 8-bit_comparator (/* ports */);\n// Verilog implementation of 8-bit comparator\nendmodule"}
{"instruction": "Write Verilog code for a 8-bit up counter.", "input": "", "output": "module 8-bit_up_counter (/* ports */);\n// Verilog implementation of 8-bit up counter\nendmodule"}
{"instruction": "Write Verilog code for a Finite state machine with 3 states.", "input": "", "output": "module finite_state_machine_with_3_states (/* ports */);\n// Verilog implementation of Finite state machine with 3 states\nendmodule"}
{"instruction": "Write Verilog code for a D flip-flop with enable.", "input": "", "output": "module d_flip-flop_with_enable (/* ports */);\n// Verilog implementation of D flip-flop with enable\nendmodule"}
{"instruction": "Write Verilog code for a 4-bit magnitude comparator.", "input": "", "output": "module 4-bit_magnitude_comparator (/* ports */);\n// Verilog implementation of 4-bit magnitude comparator\nendmodule"}
{"instruction": "Write Verilog code for a 8-bit up counter.", "input": "", "output": "module 8-bit_up_counter (/* ports */);\n// Verilog implementation of 8-bit up counter\nendmodule"}
{"instruction": "Write Verilog code for a 2-to-1 multiplexer.", "input": "", "output": "module 2-to-1_multiplexer (/* ports */);\n// Verilog implementation of 2-to-1 multiplexer\nendmodule"}
{"instruction": "Write Verilog code for a Pulse generator.", "input": "", "output": "module pulse_generator (/* ports */);\n// Verilog implementation of Pulse generator\nendmodule"}
{"instruction": "Write Verilog code for a Johnson counter.", "input": "", "output": "module johnson_counter (/* ports */);\n// Verilog implementation of Johnson counter\nendmodule"}
{"instruction": "Write Verilog code for a BCD to Excess-3 converter.", "input": "", "output": "module bcd_to_excess-3_converter (/* ports */);\n// Verilog implementation of BCD to Excess-3 converter\nendmodule"}
{"instruction": "Write Verilog code for a Binary to Gray code converter.", "input": "", "output": "module binary_to_gray_code_converter (/* ports */);\n// Verilog implementation of Binary to Gray code converter\nendmodule"}
{"instruction": "Write Verilog code for a SR flip-flop.", "input": "", "output": "module sr_flip-flop (/* ports */);\n// Verilog implementation of SR flip-flop\nendmodule"}
{"instruction": "Write Verilog code for a Parallel to serial converter.", "input": "", "output": "module parallel_to_serial_converter (/* ports */);\n// Verilog implementation of Parallel to serial converter\nendmodule"}
{"instruction": "Write Verilog code for a Ring counter.", "input": "", "output": "module ring_counter (/* ports */);\n// Verilog implementation of Ring counter\nendmodule"}
{"instruction": "Write Verilog code for a 2-to-1 multiplexer.", "input": "", "output": "module 2-to-1_multiplexer (/* ports */);\n// Verilog implementation of 2-to-1 multiplexer\nendmodule"}
{"instruction": "Write Verilog code for a ALU supporting add/sub/and/or/xor.", "input": "", "output": "module alu_supporting_add_sub_and_or_xor (/* ports */);\n// Verilog implementation of ALU supporting add/sub/and/or/xor\nendmodule"}
{"instruction": "Write Verilog code for a 4-bit down counter.", "input": "", "output": "module 4-bit_down_counter (/* ports */);\n// Verilog implementation of 4-bit down counter\nendmodule"}
{"instruction": "Write Verilog code for a Johnson counter.", "input": "", "output": "module johnson_counter (/* ports */);\n// Verilog implementation of Johnson counter\nendmodule"}
{"instruction": "Write Verilog code for a 8-bit comparator.", "input": "", "output": "module 8-bit_comparator (/* ports */);\n// Verilog implementation of 8-bit comparator\nendmodule"}
{"instruction": "Write Verilog code for a 4-bit magnitude comparator.", "input": "", "output": "module 4-bit_magnitude_comparator (/* ports */);\n// Verilog implementation of 4-bit magnitude comparator\nendmodule"}
{"instruction": "Write Verilog code for a 4-bit magnitude comparator.", "input": "", "output": "module 4-bit_magnitude_comparator (/* ports */);\n// Verilog implementation of 4-bit magnitude comparator\nendmodule"}
{"instruction": "Write Verilog code for a 8-bit comparator.", "input": "", "output": "module 8-bit_comparator (/* ports */);\n// Verilog implementation of 8-bit comparator\nendmodule"}
{"instruction": "Write Verilog code for a Debounce circuit.", "input": "", "output": "module debounce_circuit (/* ports */);\n// Verilog implementation of Debounce circuit\nendmodule"}
{"instruction": "Write Verilog code for a Parallel to serial converter.", "input": "", "output": "module parallel_to_serial_converter (/* ports */);\n// Verilog implementation of Parallel to serial converter\nendmodule"}
{"instruction": "Write Verilog code for a Parallel to serial converter.", "input": "", "output": "module parallel_to_serial_converter (/* ports */);\n// Verilog implementation of Parallel to serial converter\nendmodule"}
{"instruction": "Write Verilog code for a Binary to Gray code converter.", "input": "", "output": "module binary_to_gray_code_converter (/* ports */);\n// Verilog implementation of Binary to Gray code converter\nendmodule"}
{"instruction": "Write Verilog code for a Serial to parallel converter.", "input": "", "output": "module serial_to_parallel_converter (/* ports */);\n// Verilog implementation of Serial to parallel converter\nendmodule"}
{"instruction": "Write Verilog code for a Serial to parallel converter.", "input": "", "output": "module serial_to_parallel_converter (/* ports */);\n// Verilog implementation of Serial to parallel converter\nendmodule"}
{"instruction": "Write Verilog code for a Edge detector.", "input": "", "output": "module edge_detector (/* ports */);\n// Verilog implementation of Edge detector\nendmodule"}
{"instruction": "Write Verilog code for a Serial to parallel converter.", "input": "", "output": "module serial_to_parallel_converter (/* ports */);\n// Verilog implementation of Serial to parallel converter\nendmodule"}
{"instruction": "Write Verilog code for a Edge detector.", "input": "", "output": "module edge_detector (/* ports */);\n// Verilog implementation of Edge detector\nendmodule"}
{"instruction": "Write Verilog code for a 4-bit subtractor.", "input": "", "output": "module 4-bit_subtractor (/* ports */);\n// Verilog implementation of 4-bit subtractor\nendmodule"}
{"instruction": "Write Verilog code for a 2-to-1 multiplexer.", "input": "", "output": "module 2-to-1_multiplexer (/* ports */);\n// Verilog implementation of 2-to-1 multiplexer\nendmodule"}
{"instruction": "Write Verilog code for a Binary to Gray code converter.", "input": "", "output": "module binary_to_gray_code_converter (/* ports */);\n// Verilog implementation of Binary to Gray code converter\nendmodule"}
{"instruction": "Write Verilog code for a Traffic light controller.", "input": "", "output": "module traffic_light_controller (/* ports */);\n// Verilog implementation of Traffic light controller\nendmodule"}
{"instruction": "Write Verilog code for a ALU supporting add/sub/and/or/xor.", "input": "", "output": "module alu_supporting_add_sub_and_or_xor (/* ports */);\n// Verilog implementation of ALU supporting add/sub/and/or/xor\nendmodule"}
{"instruction": "Write Verilog code for a 4-bit subtractor.", "input": "", "output": "module 4-bit_subtractor (/* ports */);\n// Verilog implementation of 4-bit subtractor\nendmodule"}
{"instruction": "Write Verilog code for a 4-bit subtractor.", "input": "", "output": "module 4-bit_subtractor (/* ports */);\n// Verilog implementation of 4-bit subtractor\nendmodule"}
{"instruction": "Write Verilog code for a 8-bit comparator.", "input": "", "output": "module 8-bit_comparator (/* ports */);\n// Verilog implementation of 8-bit comparator\nendmodule"}
{"instruction": "Write Verilog code for a Parallel to serial converter.", "input": "", "output": "module parallel_to_serial_converter (/* ports */);\n// Verilog implementation of Parallel to serial converter\nendmodule"}
{"instruction": "Write Verilog code for a 4-bit subtractor.", "input": "", "output": "module 4-bit_subtractor (/* ports */);\n// Verilog implementation of 4-bit subtractor\nendmodule"}
{"instruction": "Write Verilog code for a D flip-flop with enable.", "input": "", "output": "module d_flip-flop_with_enable (/* ports */);\n// Verilog implementation of D flip-flop with enable\nendmodule"}
{"instruction": "Write Verilog code for a Parallel to serial converter.", "input": "", "output": "module parallel_to_serial_converter (/* ports */);\n// Verilog implementation of Parallel to serial converter\nendmodule"}
{"instruction": "Write Verilog code for a Memory write enable logic.", "input": "", "output": "module memory_write_enable_logic (/* ports */);\n// Verilog implementation of Memory write enable logic\nendmodule"}
{"instruction": "Write Verilog code for a 4-bit magnitude comparator.", "input": "", "output": "module 4-bit_magnitude_comparator (/* ports */);\n// Verilog implementation of 4-bit magnitude comparator\nendmodule"}
{"instruction": "Write Verilog code for a Pulse generator.", "input": "", "output": "module pulse_generator (/* ports */);\n// Verilog implementation of Pulse generator\nendmodule"}
{"instruction": "Write Verilog code for a Edge detector.", "input": "", "output": "module edge_detector (/* ports */);\n// Verilog implementation of Edge detector\nendmodule"}
{"instruction": "Write Verilog code for a JK flip-flop.", "input": "", "output": "module jk_flip-flop (/* ports */);\n// Verilog implementation of JK flip-flop\nendmodule"}
{"instruction": "Write Verilog code for a Moore FSM for 101 sequence.", "input": "", "output": "module moore_fsm_for_101_sequence (/* ports */);\n// Verilog implementation of Moore FSM for 101 sequence\nendmodule"}
{"instruction": "Write Verilog code for a Johnson counter.", "input": "", "output": "module johnson_counter (/* ports */);\n// Verilog implementation of Johnson counter\nendmodule"}
{"instruction": "Write Verilog code for a Pipeline register.", "input": "", "output": "module pipeline_register (/* ports */);\n// Verilog implementation of Pipeline register\nendmodule"}
{"instruction": "Write Verilog code for a Debounce circuit.", "input": "", "output": "module debounce_circuit (/* ports */);\n// Verilog implementation of Debounce circuit\nendmodule"}
{"instruction": "Write Verilog code for a Pipeline register.", "input": "", "output": "module pipeline_register (/* ports */);\n// Verilog implementation of Pipeline register\nendmodule"}
{"instruction": "Write Verilog code for a JK flip-flop.", "input": "", "output": "module jk_flip-flop (/* ports */);\n// Verilog implementation of JK flip-flop\nendmodule"}
{"instruction": "Write Verilog code for a Clock divider.", "input": "", "output": "module clock_divider (/* ports */);\n// Verilog implementation of Clock divider\nendmodule"}
{"instruction": "Write Verilog code for a ALU supporting add/sub/and/or/xor.", "input": "", "output": "module alu_supporting_add_sub_and_or_xor (/* ports */);\n// Verilog implementation of ALU supporting add/sub/and/or/xor\nendmodule"}
{"instruction": "Write Verilog code for a ALU supporting add/sub/and/or/xor.", "input": "", "output": "module alu_supporting_add_sub_and_or_xor (/* ports */);\n// Verilog implementation of ALU supporting add/sub/and/or/xor\nendmodule"}
{"instruction": "Write Verilog code for a T flip-flop with toggle.", "input": "", "output": "module t_flip-flop_with_toggle (/* ports */);\n// Verilog implementation of T flip-flop with toggle\nendmodule"}
{"instruction": "Write Verilog code for a Pulse generator.", "input": "", "output": "module pulse_generator (/* ports */);\n// Verilog implementation of Pulse generator\nendmodule"}
{"instruction": "Write Verilog code for a Serial to parallel converter.", "input": "", "output": "module serial_to_parallel_converter (/* ports */);\n// Verilog implementation of Serial to parallel converter\nendmodule"}
{"instruction": "Write Verilog code for a Debounce circuit.", "input": "", "output": "module debounce_circuit (/* ports */);\n// Verilog implementation of Debounce circuit\nendmodule"}
{"instruction": "Write Verilog code for a Moore FSM for 101 sequence.", "input": "", "output": "module moore_fsm_for_101_sequence (/* ports */);\n// Verilog implementation of Moore FSM for 101 sequence\nendmodule"}
{"instruction": "Write Verilog code for a Clock divider.", "input": "", "output": "module clock_divider (/* ports */);\n// Verilog implementation of Clock divider\nendmodule"}
{"instruction": "Write Verilog code for a SR flip-flop.", "input": "", "output": "module sr_flip-flop (/* ports */);\n// Verilog implementation of SR flip-flop\nendmodule"}
{"instruction": "Write Verilog code for a Traffic light controller.", "input": "", "output": "module traffic_light_controller (/* ports */);\n// Verilog implementation of Traffic light controller\nendmodule"}
{"instruction": "Write Verilog code for a 4-to-1 multiplexer.", "input": "", "output": "module 4-to-1_multiplexer (/* ports */);\n// Verilog implementation of 4-to-1 multiplexer\nendmodule"}
{"instruction": "Write Verilog code for a 8-bit comparator.", "input": "", "output": "module 8-bit_comparator (/* ports */);\n// Verilog implementation of 8-bit comparator\nendmodule"}
{"instruction": "Write Verilog code for a Clock gating circuit.", "input": "", "output": "module clock_gating_circuit (/* ports */);\n// Verilog implementation of Clock gating circuit\nendmodule"}
{"instruction": "Write Verilog code for a Memory write enable logic.", "input": "", "output": "module memory_write_enable_logic (/* ports */);\n// Verilog implementation of Memory write enable logic\nendmodule"}
{"instruction": "Write Verilog code for a Edge detector.", "input": "", "output": "module edge_detector (/* ports */);\n// Verilog implementation of Edge detector\nendmodule"}
{"instruction": "Write Verilog code for a Pulse generator.", "input": "", "output": "module pulse_generator (/* ports */);\n// Verilog implementation of Pulse generator\nendmodule"}
{"instruction": "Write Verilog code for a Pipeline register.", "input": "", "output": "module pipeline_register (/* ports */);\n// Verilog implementation of Pipeline register\nendmodule"}
{"instruction": "Write Verilog code for a 2-to-1 multiplexer.", "input": "", "output": "module 2-to-1_multiplexer (/* ports */);\n// Verilog implementation of 2-to-1 multiplexer\nendmodule"}
{"instruction": "Write Verilog code for a Tri-state buffer.", "input": "", "output": "module tri-state_buffer (/* ports */);\n// Verilog implementation of Tri-state buffer\nendmodule"}
{"instruction": "Write Verilog code for a Finite state machine with 3 states.", "input": "", "output": "module finite_state_machine_with_3_states (/* ports */);\n// Verilog implementation of Finite state machine with 3 states\nendmodule"}
{"instruction": "Write Verilog code for a Bidirectional shift register.", "input": "", "output": "module bidirectional_shift_register (/* ports */);\n// Verilog implementation of Bidirectional shift register\nendmodule"}
{"instruction": "Write Verilog code for a Pipeline register.", "input": "", "output": "module pipeline_register (/* ports */);\n// Verilog implementation of Pipeline register\nendmodule"}
{"instruction": "Write Verilog code for a 4-bit magnitude comparator.", "input": "", "output": "module 4-bit_magnitude_comparator (/* ports */);\n// Verilog implementation of 4-bit magnitude comparator\nendmodule"}
